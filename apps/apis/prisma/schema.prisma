generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String     @id @default(uuid())
  email                  String     @unique
  phone                  String?    @unique
  username               String     @unique
  fullName               String?
  birthDate              String?
  work                   String?
  password               String
  address                String?
  avatar                 String?
  refreshToken           String?
  refreshTokenExpiration DateTime?
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  createdMeals           Meal[]     @relation("UserCreatedMeals")
  favoritedMeals         UserMeal[]
}

model UserMeal {
  userId    String
  mealId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  meal      Meal     @relation(fields: [mealId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@id([userId, mealId])
}

model Meal {
  id          String     @id @default(uuid())
  name        String
  description String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cuisineId   String
  recipeId    String
  createdById String
  createdBy   User       @relation("UserCreatedMeals", fields: [createdById], references: [id])
  cuisine     Cuisine    @relation(fields: [cuisineId], references: [id])
  recipe      Recipe     @relation(fields: [recipeId], references: [id])
  preferredBy UserMeal[]
}

model RecipeIngredient {
  recipeId     String
  ingredientId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  recipe       Recipe     @relation(fields: [recipeId], references: [id])

  @@id([recipeId, ingredientId])
}

model Ingredient {
  id            String             @id @default(uuid())
  name          String
  image         String
  protein       Int
  fat           Int
  carbohydrates Int
  quantity      Int
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  recipes       RecipeIngredient[]
}

model Recipe {
  id                 String             @id @default(uuid())
  description        String
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  nutritionalValueId String             @unique
  meals              Meal[]
  nutritionalValue   NutritionalValue   @relation(fields: [nutritionalValueId], references: [id])
  ingredients        RecipeIngredient[]
}

model NutritionalValue {
  id            String   @id @default(uuid())
  protein       Float
  fat           Float
  carbohydrates Float
  kcal          Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  recipe        Recipe?
}

model Cuisine {
  id          String   @id @default(uuid())
  name        String   @unique
  icon        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  meals       Meal[]
}

model Todo {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  description String
  content     String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
